problem onlin real-tim schedul job singl processor previou work present upper bound competit ratio determinist algorithm howev result onli non-strateg set job directli algorithm area such grid comput instead problem econom set job separ self-interest agent agent then job algorithm length arbitrari valu deadlin job center not onli schedul payment agent mechan design problem also slightli assumpt non-strateg set mechan incent issu onli competit ratio then bound determinist mechan never agent categori subject descriptor i211 [ artifici intellig ] artifici intelligence-multiag system j4 [ social behavior scienc ] econom f12 [ comput abstract devic ] mode computation-onlin comput gener term algorithm econom design theori introduct problem onlin schedul job singl processor job releas time deadlin process time valu success complet deadlin object sum valu job respect deadlin key challeng onlin set schedul real-tim even noth job releas time competit analysi [ ] root [ ] well-studi approach onlin algorithm optim oﬄin algorithm full knowledg input begin execut interpret approach game design onlin algorithm adversari first design onlin algorithm then adversari algorithm sequenc job competit ratio ratio valu job optim oﬄin algorithm valu onlin algorithm paper complet pictur term competit analysi set algorithm k maximum ratio valu densiti valu time job k = ] present 4-competit algorithm bound competit ratio determinist algorithm same paper also bound + √ k k ≥ ] then match + √ k -competit algorithm set paper complet nonstrateg algorithm alway true characterist job releas howev domain such grid comput exampl ] assumpt invalid buyer processor time job furthermor seller not onli schedul job also amount buyer issu not non-strateg set thu extens set job separ self-interest agent instead algorithm job now onli own agent agent now differ way algorithm job algorithm true releas time artifici length job arbitrari valu deadlin job agent self-interest algorithm so job inde exampl agent incent algorithm [ ] ] addit self-interest agent problem area algorithm design mechan design ] scienc protocol self-interest agent recent year much activ interfac comput scienc mechan design ] gener mechan protocol interact agent center select outcom set mechan input job agent schedul job payment agent center basic solut concept mechan design incent compat set alway agent s interest immedi job releas truth valu length deadlin order mechan competit analysi adversari model new model adversari still sequenc job self-interest agent observ input mechan thu order competit ratio c onlin mechan incent compat alway c valu optim oﬄin mechan same sequenc job rest paper section formal result origin non-strateg set incent issu exampl mechan design section section first main result + √ k -competit mechan formal incent compat competit ratio also mechan special case agent not length job gener set section competit ratio bound determinist mechan not agent final section relat work other directli relev [ ] ] section non-strateg set section formal origin non-strateg set recap previou result formul singl processor job n job number not beforehand job i tupl θi = ri di li vi releas time deadlin length time valu respect space θi possibl tupl same job consist θi such ri di li thu model time continu job time ri point other characterist noth job arriv deadlin firm hard valu job deadlin preemption job time job thu job i onli total time processor di li θ = θ1 θn vector tupl job θ−i = θ1 θi+1 θn same vector tupl job i thu θ−i complet vector tupl valu densiti ρi = vi li job i ratio valu length input θ maximum minimum valu densiti ρmin = mini ρi ρmax = maxi ρi import ratio then ρmax ρmin maxim ratio valu densiti job algorithm alway upper bound k import ratio simplic rang possibl valu densiti ρmin onlin algorithm function f θ1 × × θn → o vector tupl number n outcom o outcom o ∈ o simpli schedul job processor function s + → n point time activ job processor idl total time job processor time t function ei t t µ s x i dx µ · indic function argument true otherwis job s laxiti time t di − t − + ei t amount time inact still deadlin job not deadlin formal −t+ei t < li also s · · so also vector θ argument exampl s θ t s t outcom f θ activ job time t input job not releas time space possibl outcom s θ t = i impli ≤ t also onlin algorithm schedul time knowledg futur input same decis time t input indistinguish time formal θ t subset tupl θ ri ≤ constraint then θ t = θ t s θ t = s θ t object function sum valu job respect deadlin w θ i · µ di ≥ li w∗ θ maxo∈o w θ maximum possibl total valu profil θ competit analysi onlin algorithm optim oﬄin algorithm oﬄin algorithm entir input θ time still not job i time ri alway w∗ θ onlin algorithm f · strictli c-competit not input θ such · w f θ θ w∗ θ algorithm c-competit also competit ratio c not overload period infinit durat period time [ ts tf ] sum length job releas time fall time period durat interv formal tf −t ≤ i| ts≤ri di≤tf li such assumpt not possibl finit competit ratio ] previou result non-strateg set ] present 4-competit algorithm td1 version case k = [ ] present √ k -competit algorithm dover gener case k ≥ bound determinist algorithm case [ ] section high-level descript td1 version exampl td1 version schedul interv processor transit idl time tb complet job first activ job interv laxiti howev remaind interv preemption activ job onli other job laxiti exampl input set job tabl first interv complet execut job rang ] preemption interv job laxiti time then new interv tb job becom activ job preemption time job laxiti order activ job td1 version variabl te p loss former record deadlin job activ job execut complet such job exist time activ job not case valu te −tb upper bound amount possibl execut time optim oﬄin algorithm due complet activ job other variabl p loss equal length first activ job current interv gener job laxiti oﬄin algorithm abl rang [ tb te ] 1 algorithm activ job job s length te −tb +p loss then algorithm 4-competit interv note impli job same valu densiti thu length competit ratio not case time te −tb +p loss = > = l2 algorithm preempt job job then complet job ri di li tabl input td1 version ] up down arrow ri di respect length box equal mechan design set howev fals inform job td1 version job exampl job s deadlin ˆd2 = then laxiti time time algorithm job job te −tb +p loss = > = l1 job then arriv job easi algorithm not possibl job tabl exampl not use p loss not significantli complex order incent issu such set mechan design problem section first mechan design formul then goal mechan formul center processor n agent valu n unknown center beforehand job i separ agent i characterist job agent s type θi ∈ θi time ri agent i privat type θi inform job i ri thu job still time now job onli own agent agent interact center direct mechan γ = θ1 · agent job ˆθi = ˆri ˆdi ˆli ˆvi g θ1× ×θn → o declar type outcom o ∈ o outcom o = s · p1 pn schedul payment agent mechan standard mechan design set outcom end mechan howev end not well-defin onlin set job payment agent i ˆdi agent s declar relev point time agent even job i ˆdi center not job i time decis instead decis mechan design space possibl mechan inde later decis job crucial mechan agent s util ui g ˆθ θi vi · µ di ≥ li · µ ˆdi ≤ di − pi ˆθ quasi-linear function valu job true deadlin payment center agent ration util maxim agent declar agent not length true length center abl lie job other hand gener formul agent length set possibl add unnecessari work job howev also restrict formul type lie not possibl declar releas time ˆri time agent job i center not time ri job agent agent arbitrari deadlin valu agent i type ˆθi = ˆri ˆdi ˆli ˆvi such ≥ li ˆri ≥ ri non-strateg set suffici algorithm upper bound k ratio ρmax ρmin mechan design assumpt so mechan also ρmin equival rang [ ρmin ρmax ] possibl valu densiti dover similar use interv prefer activ job also bound section impli fals inform also job dover note then agent declar ρmin ≤ ˆvi ˆli ≤ ρmax howev restrict not unlik center rang later mechan not extra knowledg restrict set restrict schedul now s ˆθ t = i impli ≤ t fact job not processor mechan befor preemption job job time constraint due onlin mechan s lack knowledg futur ˆθ t = ˆθ t s ˆθ t = s ˆθ t ˆθ ˆdi ˆθ ˆdi pi ˆθ pi ˆθ agent i set then set t center s ˆθ t ← i i st ≤ t ri = t then θi i t ≥ ri agent i not job then agent i job ˆθi st = t ˆli ≥ li ˆdi = t ∧ t ≥ li then job i i ˆdi = t then center set collect payment pi ˆθ agent i mechan goal aim mechan design valu job subject constraint incent compat individu ration condit domin strategi incent compat agent i regardless true type declar type other agent agent i not util unilater declar definit direct mechan γ satisfi compat ic θi θi ˆθ−i ui g ˆθ−i θi ui g ˆθ−i θi agent perspect domin strategi desir agent not reason strategi other agent distribut other agent s type mechan design perspect domin strategi import agent domin strategi reason paper domin strategi equilibrium concept such bayes-nash posit results4 decreas bound competit ratio a possibl argument need incent compat agent s actual schedul fact case exampl fals declar ˆd2 howev agent due belief futur input then lie instead schedul exampl job never then job unnecessarili not belief agent thu not then no longer competit guarante mechan compat direct mechan first revel principl domin strategi ] goal domin strategi implement then restrict loss gener second goal mechan individu ration agent truth type never neg util rational goal particip mechan voluntari definit direct mechan γ satisfi individu ration ir θi ˆθ−i ui g ˆθ−i θi final social welfar function same object function non-strateg set w θ i · µ di ≥ li nonstrateg set onlin mechan competit analysi optim oﬄin mechan γofflin oﬄin mechan type time thu alway w∗ θ definit onlin mechan γ strictli ccompetit ic ir there not profil agent type such c·w g θ θ w∗ θ section first main posit result √ k +1 -competit mechan γ1 intuit γ1 satisfi individu ration incent compat formal first properti then competit ratio then special case agent not length job mechan so no knowledg ρmin collect payment agent td1 version dover γ1 prefer activ job instead alway avail job prioriti + √ k · ei t · ρmin agent job then valu such job still constant rest declar use payment rule similar secondpric auction γ1 satisfi ic respect valu ir now ic respect other characterist improv job releas time shorter length later deadlin possibl payment agent howev first lie not possibl set third job agent true deadlin reason import alway job declar deadlin instead point possibl onli agent type time γofflin incent compat agent truth type time howev not result vcg mechan ] time satisfi compat alway social welfar mechan γ1 execut s ˆθ · algorithm i ei ˆdi agent i s job then pi ˆθ arg minvi≥0 ˆdi ˆli vi ˆθ−i ˆdi ≥ ˆli els pi ˆθ algorithm t avail ← i| t ≥ ˆri ∧ t < ˆli ∧ t ˆdi−t ≥ ˆli set non-complet non-abandon job avail = ∅ then s ˆθ t arg maxi∈avail ˆvi + √ k · ei t · ρmin break tie favor ˆri els s ˆθ t agent not incent job onli possibl effect inflat length complet job onli possibl effect declar deadlin effect agent s util set other hand obviou agent not incent later releas time mechan γ1 γ1 not activ job i job j such ˆvi + √ k·li ˆθ t ·ρmin < ˆvj note activ job approach complet γ1 condit preemption approach γ1 howev type tabl case k = show agent incent arriv job γ1 job becom activ time job releas time + = v1 +l1 > v2 then time job job + = v1 + < v3 then complet job howev job weight job job activ job time = v2 + > v3 thu agent fals ˆr1 = then job time job rang ] job ri di li tabl job slightli alter version γ1 not incent compat respect time intuit γ1 avoid problem properti first job becom activ prioriti other avail job second job s prioriti onli increas elaps time ei t rate increas job s prioriti independ characterist properti togeth job activ not time prioriti prioriti other job processor instead proof individu ration incent compat trivial proof ir proof ic lemma mechan γ1 satisfi individu ration proof arbitrari i θi ˆθ−i job i not then agent i noth thu util zero pi ˆθ−i ui g ˆθ−i θi other hand job i then valu agent i s payment formal ui g ˆθ−i θi vi − arg minvi≥0 ri di li vi ˆθ−i li vi = vi condit ic arbitrari agent i arbitrari profil ˆθ−i declar other agent agent i never fals declar ˆθi = θi subject constraint ≥ ri ˆli ≥ li regardless ˆvi truth declar ri di li not job i then declar variabl declar ˆri ≥ ri ˆli ≥ li ˆdi ≤ di never job part proof lemma first releas time regardless declar other variabl then length deadlin lemma mechan γ1 follow condit i θi ˆθ−i ∀ ˆvi ˆli ≥ li ˆdi ≤ di ˆri ≥ ri ei ˆdi ˆli ˆvi ˆθ−i ˆdi ≥ ˆli =⇒ ei ri ˆdi ˆli ˆvi ˆθ−i ˆdi ≥ ˆli proof assum contradict condit not job i not ri truth fals declar ˆri ≥ ri first case releas time truth then job i not agent i center case agent i ˆθi = ri ˆdi ˆli ˆvi first follow point execut job i • let ts = arg mint s ˆθ−i = i time job first execut • let tp = arg mint > ts s ˆθ−i = i time job i first • let ta = arg mint ei ˆθ−i t ˆli time job i ts tp undefin job i never becom activ then = tp = ta also partit job other agent ta follow set x = j| ˆrj < tp ∧ j = i job other i arriv job i first • y = j| tp ≤ ˆrj ≤ ta ∧ ˆvj > ˆvi + √ k·ei ˆθ−i ˆrj job rang [ tp ta ] prioriti job i make use normal • z = j| tp ≤ ˆrj ≤ ta ∧ ˆvj ≤ ˆvi + √ k ·ei ˆθ−i ˆrj job rang [ tp ta ] prioriti job i now activ job rang tp ta ] set y unless tp = ta case properti trivial case job i prioriti arbitrari job x ∈ x time tp time just tp job x avail job i activ formal ˆvx + √ k · ex ˆθ−i · ei ˆθ−i tp then rang [ tp ta ] job ∈ x processor contradict not true tf ∈ [ tp ] time rang job x ∈ x activ ex ˆθ−i = ex ˆθ−i tp then job i prioriti time tf ˆvx+ √ k·ex ˆθ−i ˆθ−i · ei ˆθ−i · ei ˆθ−i tf fact job x activ time tf similar argument appli arbitrari job z ∈ z time ˆrz > tp definit job i prioriti time onli job activ rang tp ta ] i set y case ii agent i ˆθi = ˆri ˆdi ˆli ˆvi ˆri > ri now job i not case not case first rang ˆri ˆri ∈ ri ts ] not schedul ts still first time job i execut also ˆri > ta not job di − ta < ˆli job i releas thu consider ∈ ts ta ] order ˆθi job i necessari condit execut job yc ∈ y rang tp ta ] onli job other i activ rang y tc = arg mint∈ tp ta ] [ ∃yc ∈ y s ˆθ−i yc ∧ s ˆθ−i yc ] first time chang now ˆri ∈ ts ta ] not job prioriti yc time tc s ˆθ−i yc first note job i not prioriti t ∈ tp tc ∃y simplic formal condit job x prioriti job y job x s prioriti strictli job y s case tie x futur tie also favor job x y s ˆθ−i y ∧ s ˆθ−i i definit tc now arbitrari y ∈ y such = yc case job y prioriti yc time tc ˆvi + √ k·ey ˆθ−i ˆθ−i tc thu case ii job y other job tc ˆri ≥ tp condit t ∈ tp tc ∃w ∈ y ∪ i s ˆθ−i w ∧ s ˆθ−i y w ∈ y definit tc = i job y replac definit set y ˆvi > ˆvi + √ k · ei ˆθ−i ˆri thu ˆri ≤ t then job i not instead y case other hand ˆri > t then job y obvious not time t exist time t now arbitrari job x ∈ x case job i prioriti job x time ts formal ˆvx + √ k · ex ˆθ−i · ei ˆθ−i ts also ˆvi + √ k·ei ˆθ−i · eyc ˆθ−i tc i s arriv not execut time ts job x not instead job y ∈ y time t ∈ tp tc ] definit tc onli way job x s prioriti befor tc case ii job i rang ts tc ] thu upper bound job x s prioriti agent i declar ˆvx+ √ k· ex ˆθ−i +ei ˆθ−i −ei ˆθ−i ˆθ−i +ei ˆθ−i −ei ˆθ−i · ei ˆθ−i · eyc ˆθ−i tc thu even upper bound job yc instead job x time tc similar argument appli arbitrari job z ∈ z time ˆrz set i x y z partit set job ta job instead job yc exist tc proof lemma mechan γ1 follow condit i θi ˆθ−i ∀ ˆvi ˆli ≥ li ˆdi ≤ di ei ri ˆdi ˆli ˆvi ˆθ−i ˆdi ≥ ˆli =⇒ ei ri di li ˆvi ˆθ−i ˆdi ≥ li proof assum contradict instanti abov variabl such job i not li di truth pair fals declar ≥ li ˆdi ≤ di note onli effect ˆdi ˆli execut algorithm not i avail specif condit t < ˆli t ˆdi − t ≥ ˆli job i ˆli ˆdi former condit complet fals latter truth li ≤ ˆli ≥ ˆdi onli former condit becom fals latter condit becom fals later execut algorithm not truth declar job i contradict now lemma payment job onli fals ˆli ˆdi ˆri lemma mechan γ1 follow condit i θi ˆθ−i ∀ ˆli ≥ li ˆdi ≤ di ˆri ≥ ri arg min vi≥0 ei ˆdi ˆli vi ˆθ−i ˆdi ≥ ˆli ≥ ri di li vi ˆθ−i di ≥ li proof assum contradict condit not valu such condit ˆdi ˆli vi ˆθ−i ˆdi ≥ ˆli ei ri di li vi ˆθ−i li not lemma ei ˆdi ˆli vi ˆθ−i ˆdi ≥ ˆli =⇒ ri ˆdi ˆli vi ˆθ−i ˆdi ≥ ˆli =⇒ ri di li vi ˆθ−i li contradict final follow lemma tell complet job monoton declar valu lemma mechan γ1 follow condit i ˆθi ˆθ−i ∀ ˆvi ≥ ˆvi ei ˆdi ˆli ˆvi ˆθ−i ˆdi ≥ ˆli =⇒ ei ˆdi ˆli ˆvi ˆθ−i ˆdi ≥ proof contradict lemma essenti ident lemma ˆri case agent i declar ˆri ˆdi ˆli ˆvi job not case ii ˆdi ˆli ˆvi job analysi case then proce before- execut not time ts initi prioriti job i decreas case ii result not chang execut job other i rang tp ta ] now lemma profit deviat possibl mechan γ1 satisfi compat proof arbitrari agent i ˆri ≥ ri ˆli ≥ li hold assumpt also agent i incent ˆdi > di job i never true deadlin then payment function non-neg agent i s util not zero ir minimum util truth θi thu consider satisfi ˆri ≥ ri ˆli ≥ li ˆdi ≤ di again ir further consider caus job i other ˆθi yield util zero truth declar θi caus job i then lemma such fals declar ˆθi not payment agent i other hand truth declar not job i then ˆθi agent i neg util vi < arg minvi≥0 ei ri di li vi ˆθ−i ˆdi li ≤ arg minvi≥0 ei ˆdi ˆli vi ˆθ−i ˆdi ˆli lemma respect proof competit ratio proof competit ratio use techniqu [ ] also lemma ic truth declar ˆθ = θ also ir order competit ratio loss social welfar γofflin denot f sequenc job γ1 divid time interv = topen f tclose f ] job f sequenc set tclose f time job f topen f = tclose f−1 f ≥ = f also f first time processor not idl interv lemma interv follow inequ tclose f tbegin f ≤ + k vf proof interv begin possibl length period time processor idl avail job then continu sequenc job c job i sequenc job i job c thu job c sequenc same job f global sequenc job ts i time job i execut note = tbegin f rang [ tbegin f tclose f ] prioriti vi+ √ k·ei activ job monoton time function linearli job activ onli point time preemption thu job i sequenc execut releas time ts i = ri prioriti not not activ now valu job c product √ k time interv job c−1 formal follow condit vc √ k c−1 h=1 ts h+1 − eh ts h induct condit vi ≥ √ k i−1 h=1 eh ts h+1 job sequenc base case i √ h=1 eh ts h+1 sum element induct step arbitrari ≤ i < c vi ≥ √ k i−1 h=1 eh ts h+1 time ts i+1 · ei ts i+1 ts i+1 = ri+1 inequ togeth vi+1 ≥√ k i eh ts h+1 induct step also tclose f ts c ≤ ≤ vc normal ρmin = fact job c s execut time not length thu total execut time tclose f tbegin f = tclose f −t c c−1 h=1 ts h+1 −eh ts h ≤ k vf now possibl execut uncomplet job γofflin associ job i not γ1 interv job now interv gap interv job i close last interv tclose f processor idl tclose f such job i activ time t ≥ tclose f complet job new interv fact if last one follow lemma equival lemma [ ] proof differ mechan lemma interv job i follow inequ vi ≤ + √ k vf proof assum contradict job i such vi > + √ k vf tclose f prioriti job f vf + √ k · lf < + √ k vf prioriti activ job monoton rang [ tbegin f tclose f ] job i prioriti activ job thu execut time t ∈ [ tbegin f tclose f ] again monoton prioriti activ job tclose f exce + √ k vf fact + √ k vf [ ] interv follow gift k amount time rang [ tbegin f tclose f ] not job addit adversari vf adversari abl job futur time due fact γ1 ignor deadlin follow lemma lemma [ ] proof now directli lemma ] abov gift total net gain clairvoy algorithm job not + √ k · vf intuit lemma adversari almost gift k · tclose f −tbegin f intuit equival job maximum possibl valu densiti time γ1 activ then execut job γ1 right tclose f lemma valu job + √ k · vf now result lemma competit ratio mechan γ1 √ k -competit proof fact way job interv entir set job competit ratio γ1 √ k +1 -competit interv sequenc f arbitrari interv oﬄin algorithm tclose f −tbegin f ·k+vf + √ k vf gift net gain lemma lemma quantiti then k ·k+vf + √ k vf = √ k +1 ·vf γ1 achiev vf competit ratio special case unalter length k=1 so far agent characterist job length job not possibl set exampl user not comput problem way job solut origin problem solut problem restrict natur set uniform valu densiti = case [ ] set condit then mechan γ2 competit ratio same competit ratio γ1 case k = knowledg ρmin use payment latter properti necessari set local grid eg depart user still self-interested7 mechan γ2 execut s ˆθ · algorithm i pi ˆθ algorithm t avail ← i| t ≥ ˆri ∧ t < li ∧ t ˆdi−t ≥ li avail = ∅ then s ˆθ t arg maxi∈avail li + ei break tie favor ˆri els s ˆθ t theorem k = agent i not fals declar li mechan γ2 individu ration incent compat k = agent i not fals declar li mechan γ2 5-competit mechan essenti simplif γ1 proof theorem basic fact = ˆli = hold prioriti li +ei ˆθ t prioriti γ1 ˆvi payment no longer incent compat competit lower bound now competit ratio + √ k γ1 bound determinist onlin mechan so third requir mechan non-neg payment nnp center never agent formal ∀i ˆθ pi ˆθi ic ir requir not standard mechan design howev γ1 γ2 trivial follow proof onli baselin util agent non-posit function ˆθ−i proof bound adversari argument similar [ ] bound +√ k non-strateg set main novelti perturb job sequenc relat incent compat argument first lemma recurr argument proof due space constraint lemma k ≥ recurr li+1 = λ · − k · i lh l1 = + √ k < λ < + √ k integ m such h=1 lh lm > λ payment not set payment incent compat fix fraction li job i theorem not determinist onlin mechan nnp competit ratio + √ k proof assum contradict determinist onlin mechan satisfi nnp competit ratio c = + √ k − > implic satisfi ic ir as well competit ratio c impli competit ratio c + x x > loss gener first profil agent type adversari argument possibl slightli θ strict properti satisfi then signific perturb θ contradict now origin profil θ pick α such < α < δ = α ck+3k adversari use sequenc job minor major minor job i li = δ vi = k · δ laxiti first minor job time = di−1 i sequenc γ job major job also laxiti possibl valu ratio vi = li length major job i follow recurr relat li+1 = c + α li − k · i lh l1 bound α impli + √ k < + α < √ k lemma m posit number such h=1 lh lm > c−1+α first major job releas time major job i releas time ri = di−1 − δ just deadlin previou job adversari major job i m onli major job j < i continu rang [ ri ri+1 ] major job job m order desir competit ratio γ major job f γofflin alway complet major job valu γ minor job valu α c+3 c also order job f processor time rf onli major job later f < m then major job + final major job γ not job f +1 rf +lf = df > rf+1 therefor θ consist major job f f f = m minor job time time df now possibl θ slightli ir pf θ later inequ strict vf pf θ then chang θf rf = rf vf lf df δ respect valu θf ic job f still γ profil θ−f not then ir nnp pf θ−f thu uf g θ−f θf howev agent f then util fals origin type θf util uf g θ−f θf vf − pf θ δ > ic furthermor agent f same amount pf θ−f pf θ due similar incent compat argument thu remaind proof vf > pf θ now substanti perturb θ proof f < m then θf ident df = df+1 + lf job f complet job f + f = m then instead df = df +lf ic profil θ−f γ still job f continu rang [ rf +lf ] thu job f +1 contradict not true then origin deadlin df job f not possibl profil θ−f θx new profil onli addit job x laxiti = df vx = lx = max df − df c + · lf + lf+1 new profil indistinguish θ−f time df job same way df then order desir competit ratio job x continu deadlin construct as late new deadlin df job f thu job f not ir nnp case pf θ−f θx uf g θ−f θx θf fact θ indistinguish θ−f θx time df agent f fals type origin θf then job df pf θ util then g θ−f θx θf vf − pf θ ic γ s execut ident θf θ−f θf θ−f γofflin advantag chang f < m then valu lf +δ valu job f γofflin valu k· f h=1 lh −2δ minor job rf+1 job f +1 then job f δ instead last minor job rf+1 lf+1 competit ratio then k· f h=1 lh−2δ lf +δ = k· f h=1 lh −2k·δ+ c−1+α ·lf −k· f h=1 lh lf +δ = c·lf + α·lf −2k·δ +δ ≥ c·lf + ck+3k δ−2k·δ lf +δ > c instead f = m then valu lm +δ γofflin valu k · m h=1 lh − + minor job dm = rm + lm then job competit ratio then k· m h=1 lh−2δ lm+δ = k· m−1 h=1 lh lm+δ > c−1+α lm+δ = c+k−1 ·lm+ αlm−2k·δ > c relat work section relat work other paper ] ] paper recent work schedul domain competit analysi onlin algorithm processor oﬄin algorithm ] mechan design also schedul problem ] model center job oﬄin set agent privat inform agent time job sever incent compat mechan approxim algorithm comput infeas optim problem paper also area algorithm mechan design mechan isfi comput requir addit standard incent requir sub-field area multicast cost-shar mechan design ] mechan effici agent multicast tree agent transmiss price survey other topic distribut algorithm mechan design [ ] onlin execut differ type algorithm challeng sever other paper onlin algorithm mechan econom set exampl ] consid onlin market auction match bid exogen arriv time [ ] gener method onlin algorithm onlin mechan incent compat respect valu truth declar valu also [ ] ] multi-unit onlin auction main differ former consid case digit good thu suppli [ ] result set so bidder arriv onli other paper awar issu incent compat real-tim system [ ] sever variant model center bandwidth agent valu arriv time domin strategi ic mechan variant point time essenti independ bayes-nash ic mechan variant center s current decis cost futur action conclus paper onlin schedul domain algorithm possibl competit ratio new solut set self-interest agent mechan incent compat respect time deadlin length valu onli competit ratio also mechan k agent not length job then bound competit ratio determinist mechan never agent sever open problem set bound restrict non-neg payment also reason assumpt maximum possibl ratio valu densiti k actual rang possibl valu densiti + √ k mechan origin assumpt final mechan unexplor area futur work 