use dynam web content relat databas tradit cach solut throughput latenc improv ineffect middlewar layer ganesh volum data semant interpret queri result reduct use cryptograph similar previou result benefit not compromis strict consist semant back-end databas further ganesh not modif applic web server databas server closed-sourc applic databas benchmark dynam web site measur prototyp show end-to-end throughput as much twofold non-data intens applic as much tenfold data intens one categori subject descriptor c24 [ computer-commun network ] system h24 [ databas manag ] system gener term design perform introduct fraction web content dynam back-end relat databas even databas content unchang tempor local access not dynam content not cacheabl web browser intermedi server such akamai mirror multiti architectur web request wan link web server databas user experi highli variabl client bursti load previou attempt dynam databas content gener transact semant ] applic modif ] new solut form databaseagnost middlewar layer ganesh ganesh effort semant content queri result instead exclus cryptograph similar previou result hash-bas similar detect use distribut file system ] perform low-bandwidth network howev techniqu not relat databas previou approach gener method similar ganesh structur relat databas result superior perform improv challeng hash-bas similar detect back-end databas first previou work space tradit storag content uninterpret bag bit intern structur hash-bas techniqu long contigu run data maximum effect contrast relat databas rich intern structur not amen hash-bas similar detect second relat databas veri tight integr consist constraint not use hash-bas techniqu third sourc code commerci databas typic not avail contrast previou work presum avail sourc code experi ganesh conceptu simpl perform significantli bandwidth repres today s commerci internet benchmark web applic throughput improv as high tenfold data-intens workload workload not data-intens throughput improv even bandwidth not constraint ganesh low overhead not perform experi also structur present databas result crucial perform improv dynam content gener world wide web mani site data function edg internet today ebusi system often three-tier architectur consist front-end web server applic server back-end databas server figur architectur first tier close concentr client edg internet user experi end-to-end latenc exposur www / track perform scalabl session scalabl system dynam content back-end databas server front-end web applic server figur multi-ti architectur traffic congest also avail scalabl web servic content dynam back-end databas not first tier databas easili lan infeas wan difficult task simultan strong consist avail toler network partit ] result databas strong consist requir mani ebusi applic such bank financ onlin retail ] thu back-end databas usual far mani set first second-ti node ] absenc replic wan bandwidth easili limit factor perform scalabl data-intens applic hash-bas system ganesh s focu effici transmiss result similar result previou queri sql queri larg result hash-bas techniqu well problem effici larg result bandwidth link use hash-bas techniqu volum data common theme mani recent storag system section techniqu basic assumpt cryptograph hash function collision-resist other word comput intract input same output function also one-way input result specif output comput infeas menez al ] provid detail assumpt abov assumpt hash-bas system collis not henc abl hash data item uniqu identifi collect data item effect content-address small hash codeword much data item perman storag network transmiss assumpt collis so rare effect non-exist recent fire [ ] howev black [ ] issu not concern ganesh commun trust part system adversari way ganesh invalid data further ganesh not critic specif hash function current sha-1 differ hash function simpl impact perform hash function eg sha256 onli few extra byte gener hash still order magnitud data item re-hash perman storag ganesh onli volatil data design implement ganesh redund result stream result fragment alreadi present queri site redund natur mani differ way exampl queri certain interv differ result updat databas howev signific common result exampl user search sequenc queri result ganesh redund transmiss correspond result fragment instead much digest fragment queri site result hash lookup cach previou result effect ganesh comput edg internet commun descript ganesh focus aspect first approach similar queri result next ganesh architectur complet invis compon multi-ti system then ganesh proxy-bas approach dataflow similar similar key design decis ganesh similar mani potenti way result fragment optim way cours one result possibl object transmiss queri s result optim decomposit difficult problem larg space possibl optim choic mani factor such content queri s result histori recent result cach manag algorithm object opaqu use rabin fingerprint ] common data object success past system such lbf ] casper [ ] rabin slide window data roll hash hash function uniformli chunk boundari order bit hash valu equal predetermin valu number order bit averag chunk size sub-divid chunk object unit comparison similar differ object locat boundari rabin fingerprint stochast usual structur properti underli data algorithm therefor deal well in-plac updat insert delet howev poorli presenc reorder data figur exampl result a b row same data differ sort attribut extrem case rabin fingerprint unabl similar data due way chunk boundari fortun ganesh domain specif knowledg precis boundari detect inform queri s result structur relat databas data tabl row therefor simpl similar previou result granular first entir result then individu row end row result natur chunk boundari import tabular structur result onli shallow interpret data ganesh not semant interpret such data type result schema integr constraint rabin workload also difficult averag chunk size too larg chunk multipl result row howev averag chunk size amount metadata describ result www / track perform scalabl session scalabl system dynam content figur rabin fingerprint ganesh s turn save use rabin also computationally-expens pass data onc chunk boundari again cryptograph hash chunk ganesh onli singl pass hash gener chunk boundari data s natur structur perform comparison section show ganesh row-bas algorithm outperform rabin fingerprint previou work alreadi rabin perform gzip ] not ganesh algorithm paper transpar key factor design need ganesh complet transpar compon typic ebusi system web server applic server databas server ganesh littl chanc signific real-world impact modif abov compon barrier entri ganesh system thu chanc adopt transpar fact ganesh pure perform enhanc not function usabl enhanc agent interposit architectur approach goal approach exist compact program interfac alreadi wide target softwar also mechan easili new code modul structur condit easili context popular java program languag ebusi system java databas connect jdbc api ] allow java applic access wide varieti databas even other tabular data repositori such flat file access data sourc jdbc driver jdbc api databas commun mechan figur jdbc typic applic jdbc interfac jdbc driver applic modif jdbc driver thu natur modul code interposit figur b nativ jdbc driver ganesh jdbc driver same standard interfac ganesh driver in-memori cach result fragment previou queri perform reassembl result databas new process ganesh proxi proxi multipl front-end node consist part code similar result fragment origin nativ jdbc driver databas use proxi databas ganesh database-agnost simplifi experiment ganesh thu abl wide rang databas applic modif proxy-bas nativ jdbc driver figur lightweight code compon databas vendor main funcclient databas web applic server nativ jdbc driver wan nativ architectur client databas ganesh proxi nativ jdbc driver wan web applic server ganesh jdbc driver b ganesh interposition-bas architectur figur nativ ganesh architectur tion commun applic remot databas forward queri buffer entir result request part result ganesh jdbc driver figur b applic interfac ident nativ driver abil result compact hash-bas descript proxi reconstruct driver in-memori cach recentlyreceiv result cach onli sourc result fragment result attempt ganesh driver proxi databas updat lack cach consist not correct descript result alway proxi perform benefit ganesh stale data simpli cach time ganesh proxi databas nativ jdbc driver unchang figur b databas thu complet unawar exist proxi proxi not queri ganesh driver nativ driver instead proxi respons databas output nativ driver similar result hash-bas encod result enough similar architectur not load databas section much databas scalabl lan wan hash-bas encod proxi awar result fragment avail ganesh driver s cach approach optimist result fragment avail possibl initi transmiss result howev case littl overlap previou result ganesh driver mani call proxi reconstruct result fragment situat proxi loos state ganesh driver s cach compon control rel simpl gray-box techniqu explicit commun cach coher instead proxi ganesh driver s cach manag algorithm list hash ganesh driver like result fragment case mistrack loss correct extra round-trip delay fragment client loss synchron proxi proxi state also proxi not result onli hash proxi scalabl even mani front-end node www / track perform scalabl session scalabl system dynam content object output stream convert resultset object input stream convert resultset all data recip resultset all data resultset network ganesh proxi ganesh jdbc driver result set recip result set ye ye no no ganeshinputstream ganeshoutputstream figur dataflow result handl encod decod result ganesh proxi databas output java nativ jdbc driver output java object type resultset present jdbc interfac data type result databas queri resultset object other java object unmodifi section proxi row boundari resultset fragment singl result row resultset object object new type reciperesultset term recip compact descript databas result similar file recip casper file system ] convers result fragment like present ganesh driver s cach sha-1 hash fragment previous unseen result fragment verbatim proxi also hash new result fragment present driver s cach futur note proxi onli hash result fragment not recip proxi reciperesultset similar entir result then row level entir result present ganesh driver s cach reciperesultset simpli singl hash entir result otherwis hash row present cach other row verbatim proxi overal space save reciperesultset origin resultset reciperesultset object back resultset object ganesh driver figur resultset handl end sha-1 hash reciperesultset local cach result fragment hit hash correspond fragment miss driver ganesh proxi fragment previous unseen result fragment verbatim proxi result cach veri few miss proxi accur ganesh driver s cach state futur optim fetch fragment valuabl mani small fragment high-lat wan transform complet fulli resultset object applic experiment valid three question goal design ganesh • first perform significantli similar databas result benchmark dataset detail user stori bboard gb comment gb user item tabl benchmark dataset detail • second import ganesh s structur similar detect rel rabin s similar detect • third overhead proxy-bas design accept evalu answer question experi ganesh prototyp section benchmark evalu procedur experiment setup result experi section benchmark evalu benchmark ] wide other research variou aspect multi-ti [ ] ebusi architectur ] first benchmark bboard slashdot technology-ori news site second benchmark auction ebay onlin auction site benchmark content dynam inform databas detail dataset tabl bboard benchmark bboard benchmark also rubbo ] model slashdot popular technology-ori web site slashdot link news stori other topic interest elsewher web site also bulletin board user post stori thread convers form not uncommon stori hundr comment matter hour bboard benchmark similar site model activ user readonli oper such stori day stori categori comment as well write oper such new user registr comment stori submiss benchmark differ phase short warmup phase runtim phase main bodi workload short cool-down phase paper onli result runtim phase warm-up phase import dynam system state measur phase not signific evalu cool-down phase sole benchmark warm-up runtim cool-down phase minut respect number simul client benchmark avail java servlet php version differ dataset ganesh java servlet version expand dataset bboard benchmark defin differ workload first author mix % read-onli oper % read-writ oper second brows mix onli read-onli oper not databas auction benchmark auction benchmark also rubi ] model onlin auction site ebay web site item auction format main activ user includ brows sell bid item activ site benchmark read-onli activ such item categori region as well read-writ www / track perform scalabl session scalabl system dynam content netem router ganesh proxi client web applic server databas server figur experiment setup activ such bid item item feedback bboard benchmark differ phase warm-up runtim cool-down phase experi minut respect ganesh client configur number test client benchmark avail enterpris java bean ejb java servlet php version differ dataset ganesh java servlet version expand dataset auction benchmark defin differ workload first bid mix % read-onli oper % read-writ oper second brows mix onli read-onli oper not databas experiment procedur both synthet workload client web server number client experiment paramet client instanc benchmark own thread matrix transit differ benchmark state matrix stochast model probabl differ state typic user action exampl transit user log auction system then item sale bid activ auction client also model time request think time exponenti distribut mean second ganesh axe number client wan bandwidth load especi use ganesh s perform cpu disk databas server proxi limit factor previou studi approxim % wide-area internet bottleneck avail bandwidth mb/ ] work evalu wan bandwidth mb/ ms round-trip latenc repres sever network path mb/ ms round-trip latenc repres moder constrain network path also ganesh s perform mb/ ad round-trip latenc bandwidth repres unconstrain network especi use potenti overhead ganesh situat wan bandwidth not limit factor combin number client wan bandwidth result configur • nativ configur nativ avoid ganesh s overhead proxi java object serial • ganesh configur b number client wan bandwidth result correspond nativ result perform benefit due ganesh middlewar system metric improv throughput number client request second metric ganesh s overhead averag respons time client request experi ganesh driver applic server cach size items1 proxi effect ganesh driver s cach state experi miss rate driver never % experiment setup experiment setup benchmark figur machin ghz pentium hyperthread except databas server machin gb sdram fedora core linux distribut databas server gb sdram apach s tomcat applic server java servlet web server benchmark java servlet dynam content databas server open sourc mysql databas nativ jdbc driver connector/j driver mysql applic server sun s java virtual machin runtim environ java servlet sysstat tool cpu network disk memori util machin machin switch gigabit ethernet network figur front-end web applic server proxi databas server netem router ] router bandwidth latenc set network netem router standard pc network card linux traffic control network emul softwar bandwidth latenc constraint onli link applic server databas nativ case applic server proxi ganesh case commun applic server databas ganesh data proxi focu wan link applic server databas constraint link simul test client web server throughput respons time section first question section perform significantli similar databas result question result bboard auction benchmark metric perform improv obtain use ganesh throughput perspect web server averag respons time perspect client throughput term number client request second bboard result analysi author mix figur b averag number request second averag respons time request client bboard s author mix figur nativ easili mb/ link client nativ solut deliv requests/sec averag respons time second nativ s drop increas test client client due congest applic server usabl studi respons time second user java sizeof oper java therefor size number object size cach dump end experi never mb www / track perform scalabl session scalabl system dynam content mb/ mb/ mb/ test client requests/sec nativ ganesh mb/ mb/ mb/ test client avgresptim sec nativ ganesh note logscal throughput author mix b respons time author mix mb/ mb/ mb/ test client requests/sec nativ ganesh mb/ mb/ mb/ test client avgresptim sec nativ ganesh note logscal c throughput brows mix d respons time brows mix mean trial maximum standard deviat throughput respons time % % correspond mean figur bboard benchmark throughput averag respons time other task ] number number test client nativ system unus ganesh mb/ howev twofold improv test client fivefold improv client ganesh s perform slightli client network nativ figur b ganesh s respons time substanti sub-second respons time client figur also test client ganesh mb/ same throughput averag respons time nativ mb/ onli client nativ mb/ deliv throughput ganesh mb/ ganesh nativ mb/ ganesh no twofold improv nativ test client ganesh not network test client configur test client averag respons time second rather nativ second visibl gain ganesh bandwidth mb/ network no longer bottleneck ganesh howev still nativ term throughput brows mix figur c d averag number request second averag respons time request client bboard s brows mix regardless test client configur figur c nativ s mb/ reqs/sec ganesh mb/ test client deliv sixfold increas throughput improv elevenfold increas test client ganesh network further figur d nativ s averag respons time second test client system unus high respons time further increas addit test client even test client configur ganesh accept averag respons time second due data-intens natur brows mix ganesh mb/ surprisingli much nativ mb/ further figur d averag respons time nativ mb/ accept test client unus test client averag respons time second mb/ case respons time addit extra test client ganesh mb/ nativ ganesh mb/ not bandwidth limit howev perform plateau test client due databas cpu filter variant nativ perform bboard benchmark bandwidth mb/ nativ perform benchmark code stori comment particular stori databas onli then postprocess comment exactli behavior slashcod code base slashdot web site benchmark pre-filt databas modifi benchmark filter variant model develop optim sql level data interest breviti onli result author mix author mix test client mb/ figur nativ s increas % origin benchmark ganesh s improv % nativ s perform drop client test client time due high respons time signific gain nativ mb/ test client origin benchmark nativ % improv throughput % reduct averag respons time www / track perform scalabl session scalabl system dynam content mb/ mb/ mb/ test client requests/sec nativ ganesh mb/ mb/ mb/ test client avgresptim sec nativ ganesh note logscal throughput author mix b respons time author mix mean trial maximum standard deviat throughput respons time % % correspond mean figur bboard benchmark filter variant throughput averag respons time ganesh improv origin still % requests/sec nativ thu optim help nativ ganesh still improv perform auction result analysi bid mix figur b averag number request second averag respons time request client auction bid mix bid mix mixtur read write oper auction benchmark not data intens bboard therefor gain bandwidth mb/ figur increas throughput due ganesh rang % test client % test client figur b averag respons time ganesh significantli nativ decreas % test client % test client figur also fourfold increas bandwidth mb/ mb/ nativ no perform differ ganesh nativ test client configur bandwidth ganesh nativ ganesh still use non-constrain scenario bandwidth meter basi similar result mb/ scenario brows mix auction s brows mix c d averag number request second averag respons time request client again gain bandwidth mb/ nativ ganesh similar throughput respons time test client throughput same test client figur d ganesh s averag respons time % nativ nativ link client extra test client onli averag respons time ganesh regardless test client configur not bandwidth same respons time test client figur c ganesh s throughput almost twice nativ bandwidth mb/ ganesh nativ bandwidth limit equival throughput respons time benchmark orig size ganesh size rabin size selectsort1 mb mb mb selectsort2 mb mb mb tabl similar microbenchmark structur vs rabin similar section second question section how import ganesh s structur similar detect rel rabin fingerprinting-bas similar question microbenchmark bboard auction benchmark ganesh alway rabin fingerprint onli subset result here interest breviti microbenchmark microbenchmark exampl effect data rabin algorithm first microbenchmark selectsort1 queri sort order mb data spread approxim k row queri then differ sort attribut same number row same data order row differ such scenario larg amount similar result tabl show ganesh row-bas algorithm % reduct rabin fingerprint algorithm averag chunk size paramet kb onli % reduct reason figur rabin fingerprint span data consecut boundari usual row boundari order row second result rabin fingerprint now differ row algorithm unabl signific similar small gain mostli singl row larg enough multipl chunk selectsort2 micro-benchmark same queri minimum chunk size rabin fingerprint algorithm tabl even small gain previou microbenchmark minimum chunk size averag row size partial problem dynam paramet rabin fingerprint algorithm comput expens especi presenc workload applic benchmark bboard benchmark section version ganesh first rabin www / track perform scalabl session scalabl system dynam content mb/ mb/ mb/ test client requests/sec nativ ganesh mb/ mb/ mb/ test client avgresptim sec nativ ganesh note logscal throughput bid mix b respons time bid mix mb/ mb/ mb/ test client requests/sec nativ ganesh mb/ mb/ mb/ test client avgresptim sec nativ ganesh note logscal c throughput brows mix d respons time brows mix mean trial maximum standard deviat throughput respons time % % correspond mean figur auction benchmark throughput averag respons time chunk algorithm second ganesh row-bas algorithm rabin s result brows mix ganesh s result figur figur mb/ independ test client configur rabin significantli ganesh combin reason first section rabin similar not result s structur inform second benchmark queri larg result case rabin small averag chunk size larg number object other use data cach contrast ganesh abl larg row correspondingli size chunk cach statist ganesh s ratio roughli time rabin throughput measur mb/ similar except rabin s perform test client case ganesh not network limit fact throughput same client mb/ rabin howev advantag bandwidth increas mb/ slightli perform mb/ rabin s throughput almost similar ganesh bandwidth no bottleneck normal respons time figur b similar trend mb/ addit test client normal respons time ganesh s averag respons time rabin s howev point rabin ganesh note client mb/ rabin overhead even not bandwidth section due fact rabin resultset twice overhead disappear client databas cpu perform ganesh rabin proxi overhead section third question section overhead ganesh proxy-bas design accept question perform bandwidth evalu section ganesh nativ substanti throughput improv bandwidth onli bandwidth latenc averag respons time client request throughput number client request second overhead visibl author mix origin bboard benchmark visibl gain ganesh mb/ ganesh howev still nativ term throughput averag respons time ganesh absolut differ second impercept end-us brows mix even differ averag respons time result filter variant bboard benchmark similar even auction benchmark differ nativ ganesh s respons time mb/ never second onli except abov result filter variant bboard benchmark ganesh test client second averag respons time thu even much network wan link not bottleneck ganesh alway throughput equival nativ extra latenc proxy-bas design usual impercept relat work knowledg ganesh first system use hash-bas techniqu cach databas result throughput respons time applic dynam content also also first system benefit structur inform www / track perform scalabl session scalabl system dynam content mb/ mb/ mb/ test client normthroughput mb/ mb/ mb/ test client normresponsetim throughput b normal respons time throughput normal result impli rabin respons time normal result impli ganesh mean trial maximum standard deviat throughput respons time % % correspond mean figur comparison ganesh rabin bboard brows mix similar section first altern approach dynam content then other use hash-bas primit distribut system dynam content databas layer number system part databas edg ] system cach entir tabl essenti replic databas materi view previou queri repli ] tight integr back-end databas time bound propag updat system also usual toward workload not strict consist stale data further ganesh mid-tier cach solut ] complex queri plane distribut queri process gao al ] distribut object replic architectur data store s consist requir per-appl basi solut substanti develop resourc detail understand applic system partit replic applic s databas ] not full transact semant comparison ganesh not semant underli databas recent work evalu edg cach option dynam web site ] care plan complex strategi perform instead work architectur tier databas edg evalu ganesh scenario databas scalabl c-jdbc [ ] sss ] ganym [ ] also use interposition-bas architectur transpar databas middlewar level approach architectur ganesh complementari other up present layer widespread adopt fragment-bas [ ] cach util separ differ part web page fragment-bas cach work edg recent propos web page assembl client content deliveri [ ] ganesh not present layer same principl duplic transfer detect ] web cach effici as well web access bandwidth limit link ] hash-bas system past few year emerg mani system hash-bas techniqu heart system idea similar data interpret data simpl yet eleg idea reli cryptograph hash section success applic idea wide rang storag system exampl peer-to-p backup person comput file ] storage-effici archiv data ] similar file ] spring wetheral [ ] similar principl network level synchron cach end network link data token transmiss then remot end other hash-bas system such casper [ ] lbf [ ] filesystem layer-2 bandwidth optim such riverb peribit rabin [ ] span common data approach especi use data item in-plac insert delet updat howev section show perform techniqu dramat drop presenc data ganesh instead row boundari divid similar aggress use hash-bas techniqu system hash primari identifi object persist storag storag system such cf ] past [ ] distribut hash tabl categori singl instanc storag ] venti [ ] other exampl such system section use cryptograph hash persist data level faith collision-resist ganesh time reveal shortcom hash algorithm effort flaw much ganesh mere matter hash algorithm use dynam web content relat databas place demand wan bandwidth tradit cach solut bandwidth latenc reduct often ineffect such content paper impact wan access databas substanti ganesh architectur compromis databas s strict consist semant essenc ganesh architectur use comput edg commun internet ganesh abl cryptograph hash similar previou result www / track perform scalabl session scalabl system dynam content compact recip result rather full result design interposit complet transpar client applic server databas server unawar ganesh s presenc modif experiment evalu confirm ganesh conceptu simpl highli effect throughput respons time result also structur present databas result similar crucial perform improv 